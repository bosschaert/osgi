<?xml version="1.0" encoding="utf-8"?>
<!--
    Copyright (c) Contributors to the Eclipse Foundation
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   
    SPDX-License-Identifier: Apache-2.0 
 -->
<chapter label="160"
         version="5.0" xml:id="service.feature.launcher"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Feature Launcher Service Specification</title>

  <info>
    <releaseinfo><xref endterm="org.osgi.service.feature.launcher-version"
    linkend="org.osgi.service.feature.launcher"/></releaseinfo>
  </info>

  <section>
      <title>Introduction</title>

      <para>The <xref linkend="service.feature"/> defines a model to 
      design and declare Complex Applications and reuable Sub-Components that are
      composed of multiple bundles, configurations and other metadata.</para>
      
      <para>This specification focuses on turning these Features into a running system,
      by introducing the Feature launcher. The launcher takes a Feature definition,
      obtains a runtime environment for it and then starts the Feature in that
      environment.</para>
      
      <para>
      The launcher also interacts with the Configuration Admin Service, that is, it provides
      configuration to the system if present in the Feature.
      </para>
  </section>

  <section>
  	<title>Launching a Feature</title>
  	<para>To launch a Feature, the launcher must find or create a target environment for the 
  	Feature first. For example it can launch an OSGi framework that the Feature should run in.
  	</para>
  	
  	<para>
  	The launcher should deploy all the bundles referenced by the Feature in this Framework. 
  	It must 
  	first install all bundles, then resolve them and finally start all the bundles.
  	The order in which this happens between the bundles is not defined.
  	<remark>Introduce start order in metadata</remark> 
  	</para>
  	
  	<para>
  	Once all bundles are started and all bundle fragments resolved and attached the launcher 
  	should provide the specified configurations to the Configuration Admin Service. 
  	</para>
  	
  	<para>
  	A Feature launcher can be obained using the <xref linkend="org.osgi.service.feature.launcher.LauncherFactory"
  	xrefstyle="hyperlink"/> service. This service can be obtained from the Service registry if running
  	in an OSGi Framework or using the ServiceLoader mechanism otherwise.
  	</para>
  	
  	<programlisting>LauncherFactory lf = ServiceLoader.load(LauncherFactory.class).iterator().next();
FeatureService fs = ServiceLoader.load(FeatureService.class).iterator().next()

Feature myFeature = fs.readFeature(new InputStreamReader(
  new URL("file:///home/david/myfeature.json").openStream()));
Launcher launcher = factory.newLauncher(myFeature, Collections.emptyMap());

FrameworkFactory ff = launcher.findFrameworkFactory();
Framework framework = launcher.createFramework(ff);
launcher.launch(framework);
  	</programlisting>
  	
  	<para>If a Feature can't be launched <code>start()</code> will throw a 
  	<xref linkend="org.osgi.service.feature.launcher.LauncherException"
  	xrefstyle="hyperlink"/>.
  	</para>
  </section>

  <section>
  	<title>Handling Bundles</title>
  	<para>All bundles listed in the Feature will first be installed, then resolved
  	and finally started in the Framework chosen by the launcher.</para>
  	
  	<para>Bundle fragments are installed and resolved and attached to their host(s).
  	</para>
  	
  	<para>If a Bundle cannot resolve or start a <code>LauncherException</code> must be
  	thrown.</para>
  </section>

  <section>
  	<title>Handling Configuration</title>
  	<para>If configuration is found in the Feature then it is passed to the Configuration
  	Admin service. If a Feature contains a <code>configuration</code> section but the Configuration
  	Admin service is not found in the running system, the launcher will abort with an 
  	<code>LauncherException</code>.</para>
  </section>

  <section>
  	<title>Specifying Framework Properties</title>
  	<para>Framework Launching Properties can be provided in the Feature through
  	the <code>framework-launching-properties</code> extension.
  	The launcher must ensure that the Framework it provides for the feature has these
  	properties set. If it cannot provide a Framework with the requested Framework properties
  	set it must fail with a <code>LauncherException</code>.</para>
  	
  	<para>For example, to ensure the <code>org.osgi.framework.bsnversion</code> Framework
  	property is set for the Feature, specify the following in the Feature: 
  	<programlisting>  "extensions": {
    "framework-launching-properties": {
      "type": "json",
      "kind": "mandatory",
      "json": {
          "org.osgi.framework.bsnversion": "multiple"
      }
    }
  }</programlisting>  		
  	</para>
  </section>

  <section>
  	<title>Specifying Variables</title>
  	<para>Variables allow for late binding of configuration values and Framework properties.
  	Variables are provided through the <xref linkend="org.osgi.service.feature.launcher.LauncherFactory"
  	xrefstyle="hyperlink"/>:
  	<programlisting>Map&lt;String,Object&gt; variables = new HashMap&lt;&gt;();
variables.put("user.name", "scott");
variables.put("db.driver", "postgresql");
  	
LauncherFactory factory = ... // From Service Registry or Service Loader
Launcher launcher = factory.newLauncher(
  new URL("https://repo.maven.apache.org/maven2/org/foo/Bar/1.0.0/Bar-1.0.0.osgifeature"),
  variables);
  
launcher.start();</programlisting>
  	</para>
  </section>
  
  <section>
  	<title>Specifying Runtime Preconditions</title>
  	<para>A Feature can specify the preconditions it places on its runtime environment. That is,
  	the Framework used to run the Feature in, must satisfy these constraints. If the Launcher
  	cannot provide a Framework with the specified conditions, it must fail.</para>
  	
  	<para>
  	Preconditions are specified as requirements in the Feature.
  	If no preconditions are specified, the Launcher is free to choose a Java and OSGi implementation
  	of its choice.
  	</para>
  	
  	<para>For example:<programlisting>  "requirements": [
    {
      "namespace": "osgi.ee", 
      "filter":    "(&amp;(osgi.ee=JavaSE)(version=11))"
    }, {
      "namespace": "osgi.wiring.package", 
      "filter":    "(&amp;(osgi.wiring.package=org.osgi.framework)(version&gt;=1.10))"    
    }
  ]</programlisting>
  	</para>
  </section>

  <section>
    <title>Specifying the Framework to launch</title>
    <para>
    <programlisting>"extensions": {
    "frameworks": {
      "type": "artifacts",
      "kind": "mandatory",
      "artifacts": [
          {"id": "org.apache.felix:org.apache.felix.framework:7.0.5"},
      ]
    }
  }
    </programlisting>
    
    </para>
  </section>

  <section>
  	<title>Specifying Extension Handlers</title>
  	<para></para>
  	<remark>TODO</remark>
  </section>

  <section>
  	<title>Specifying Post-processors</title>
  	<para></para>
  	<remark>TODO</remark>
  </section>
  
  <!-- Specifying merge conflict handlers -->

  <xi:include href="../../generated/javadoc/docbook/org.osgi.service.feature.launcher.xml"/>


</chapter>



